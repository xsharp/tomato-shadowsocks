#!/bin/sh
#
# Copyright (C) 2015-2016 Tomato shibby-shadowsocks  
# Copyright (C) 2015-2016 Jason Lin <wojiaolinmu008@gmail.com>
# --------------------------------------------------------------------------------------------------------
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
# --------------------------------------------------------------------------------------------------------
#

# Debug 
#set -x

# opkg source site
OPKG_SITE="http://entware.mirrors.ligux.com/binaries"

# Architecture
ARCH="armv7"

# SMTP server (EP:"smtp.gmail.com")
SMTP="smtp.163.com"
# Send E-mail Username
username=""
# Send E-mail password
password=""
# Sender E-mail
FROM=""
# E-mail Subject
TITLE="ShadowSocks"
# Content of E-mail
CONTENT="Your tools running over the wall!"
# Target E-mail address
TO=""

# XIAOMI Fan Mode
xiaomi_fan=0

READ="\033[31;1m"
BOLD="\033[42;1m"	
NORM="\033[0m"
ansi_red="\033[1;31m";
ansi_white="\033[1;37m";
ansi_green="\033[1;32m";
ansi_yellow="\033[1;33m";
ansi_blue="\033[1;34m";
ansi_bell="\007";
ansi_blink="\033[5m";
ansi_std="\033[m";
ansi_rev="\033[7m";
ansi_ul="\033[4m";
INFO="$BOLD INFO: $NORM"
WARNING="$READ WARNING: $NORM"
MOUNT="$ansi_white MOUNT: "
DEPENDENCE="$ansi_white DEPENDENCE: "
PLATFORM="$ansi_white PLATFORM: "
PACKAGES="$ansi_white PACKAGES: "
SHADOWSOCKS="$ansi_white SHADOWSOCKS: "
START_SCRIPT="$ansi_white START_SCRIPT: "
ShadowSocks_Account="$ansi_white ShadowSocks_Account: "
DNSMASQ="$ansi_white DNSMASQ: "
ZONEINFO_ASIA="$ansi_white ZONEINFO_ASIA: "
ss_switch="$ansi_white ss_switch: "
backup="$ansi_white backup: "

# You can mount the partition path editing (EP:"/jffs" or "/tmp/mnt/sda1" )
PREFIX=/jffs
SCRIPT_DIR=$(dirname ${0})
SCRIPT_DIR=$(cd ${SCRIPT_DIR} && pwd)

# Time
DATE=$(date "+%Y-%m-%d %H:%M:%S")

# Configure dnsmasq
dnsmasq=/opt/etc/dnsmasq.conf

# Schduler
CHECK=/opt/etc

# Zoneinfo
ZONE=/opt/share/zoneinfo/Hongkong

# Link
gfw_block_list="https://raw.githubusercontent.com/koolshare/koolshare.github.io/master/maintain_files/gfwlist.conf"
china_routing_list="http://entware.mirrors.ligux.com/apnic/delegated-apnic-latest"
china_domain_list="http://entware.mirrors.ligux.com/dnsmasq-china-list/accelerated-domains.china.conf"
china_google_list="http://entware.mirrors.ligux.com/dnsmasq-china-list/google.china.conf"

# alias of iptables
IPT="iptables -t nat"

case ${1} in

-su | --set_up) 
	DECIVE=$(cat /proc/cpuinfo | grep "ARMv7" | grep -v "grep")
	if [ -z "$DECIVE" ]; then
		echo -e -n $PLATFORM
		sleep 1
		echo -e "$ansi_red ERROR. $ansi_std"
		echo -e $WARNING $BOLD This script is not suitable for the platform,can not continue.$NORM 
		exit 0
	else
		if [ ! -d "$PREFIX/shadowsocks" ]; then
			echo -e $INFO "Creating in..."
			entware() {
				cd $PREFIX;wget $OPKG_SITE/$ARCH/backup/entware_backup.tar.gz
				md5sum_entware="77184e3c3c2645818ccb0404dce8f5ce"
				checksum=`md5sum $PREFIX/entware_backup.tar.gz | sed "s/  .*//"`
				if [ ! "$md5sum_entware" == "$checksum" ]; then
					echo "$ansi_red entware-ng installation failed $ansi_std"
					exit 0
				fi
				tar -zxvf entware_backup.tar.gz
				[ -f $PREFIX/entware_backup.tar.gz ] && rm -rf $PREFIX/entware_backup.tar.gz
			}
			entware			
			cd /tmp/home/root
			mkdir -p $PREFIX/shadowsocks			
			cp $SCRIPT_DIR/shadowsocks $PREFIX/shadowsocks
			mount -o bind $PREFIX/opt /opt	
			/opt/bin/opkg update	
			if [ -e $SCRIPT_DIR/china* -a -e $SCRIPT_DIR/cron* -a -e $SCRIPT_DIR/dif* -a -e $SCRIPT_DIR/pcap_dns* -a -e $SCRIPT_DIR/pdns* -a -e $SCRIPT_DIR/shadowsocks-libe* -a -e $SCRIPT_DIR/dnscryp* -a -e $SCRIPT_DIR/zone* -a -e $SCRIPT_DIR/dnsma* ]; then
				cd $SCRIPT_DIR && opkg install --force-checksum china* pdnsd* pcap* shadow* diff* dnscr* dnsma* cron* zonei* bash
				echo -e "$ansi_green SHADOWSOCKS script installed successfully! $ansi_std"
				sleep 5
				ln -s $PREFIX/shadowsocks/shadowsocks /opt/bin
				ln -sf /usr/sbin/xtables-multi /opt/sbin/iptables-save
				ln -sf /usr/sbin/xtables-multi /opt/sbin/ip6tables-save
				ln -sf /usr/sbin/xtables-multi /opt/bin/iptables-xml
			else
				echo -e "$ansi_red You do not import the entire IPK! $ansi_std"
				exit 0
			fi	
		else
			echo -e "$ansi_yellow SHADOWSOCKS already installed! $ansi_std"
		fi
		echo -e -n $PLATFORM
		sleep 1 
		echo -e "$ansi_green PASS. $ansi_std"
	fi

	autorun=/opt/etc/init.d/auto.run
	if [ ! -f "$autorun" ]; then
		echo "#!/bin/sh" >> $autorun
		echo >> $autorun
		echo "if [ ! -f /var/log/auto.run.lock ]; then" >> $autorun
		echo "	if [ -f /var/notice/wan ]; then" >> $autorun
		echo -e "		mount -o bind $PREFIX/opt /opt" >> $autorun
		echo "		shadowsocks -S" >> $autorun
		echo "		shadowsocks -m" >> $autorun
		echo "		if [ -f /var/notice/iptables ]; then" >> $autorun
		echo "			shadowsocks -r" >> $autorun
		echo "		fi" >> $autorun
		echo "		touch /var/log/auto.run.lock" >> $autorun
		echo "	fi" >> $autorun
		echo "fi" >> $autorun
		echo >> $autorun

		sleep 1
		chmod +x $autorun
		ln -s $autorun /opt/bin	
	fi

	if [ -d "$PREFIX/shadowsocks" ]; then
		echo -e -n $SHADOWSOCKS
		sleep 1
		echo -e "$ansi_green PASS. $ansi_std"
	else
		echo -e -n $SHADOWSOCKS
		sleep 1
		echo -e "$ansi_red ERROR. $ansi_std"
		rm -rf $PREFIX/opt
		echo -e $WARNING $BOLD"Please install the SHADOWSOCKS script."$NORM 
		exit 0		
	fi

	if [ "`ls -A /opt`" = "" ]; then
		echo -e -n $MOUNT
		sleep 1
		echo -e "$ansi_red ERROR. $ansi_std"
		rm -rf $PREFIX/opt
		echo -e $WARNING $BOLD"OPT directory does not mount."$NORM 
		exit 0
	else
		echo -e -n $MOUNT
		sleep 1
		echo -e "$ansi_green PASS. $ansi_std"		
	fi	

	BIN=/opt/bin
	SBIN=/opt/sbin
	echo -e "chinadns \ncrontab \ndiff \ndnscrypt-proxy \nPcap_DNSProxy \npdnsd-ctl \nss-redir \ndnsmasq \nzoneinfo_asia" > /var/log/find.txt	
	cd $BIN
	if [ ! -f chinadns -o ! -f Pcap_DNSProxy -o ! -f ss-redir -o ! -f pdnsd-ctl -o ! -f diff -o ! -f dnscrypt-proxy ]; then	
		ls -1 chinadns Pcap_DNSProxy ss-redir pdnsd-ctl diff dnscrypt-proxy crontab > /var/log/find_N.txt
	else
		ls -1 chinadns Pcap_DNSProxy ss-redir pdnsd-ctl diff dnscrypt-proxy crontab > /var/log/find_N.txt
	fi
	cd /
	
	find $SBIN/dnsmasq &> /dev/null;echo $? > /var/log/sbin.txt
	sbin=`sed -n '1p' /var/log/sbin.txt`
	if [ "$sbin" == "0" ]; then
		echo -e -n $DNSMASQ
		sleep 1 
		sed -i '/^$/d' /var/log/find_N.txt
		echo "dnsmasq" >> /var/log/find_N.txt
		echo -e "$ansi_green PASS. $ansi_std"
	else
		echo -e $DNSMASQ
		sleep 1	
		rm -rf $PREFIX/opt
		echo -e $ansi_white"dnsmasq-full"$ansi_std
	fi				 

	if [ -f "$ZONE" ]; then
		echo -e -n $ZONEINFO_ASIA
		sleep 1
		sed -i '/^$/d' /var/log/find_N.txt
		echo "zoneinfo_asia" >> /var/log/find_N.txt
		echo -e "$ansi_green PASS. $ansi_std"
	else
		echo -e -n $ZONEINFO_ASIA
		sleep 1		
		rm -rf $PREFIX/opt
		echo -e "$ansi_white zoneinfo_asia"
	fi
	
	find $BIN/chinadns $BIN/Pcap_DNSProxy $BIN/ss-redir $BIN/pdnsd-ctl $BIN/diff $BIN/dnscrypt-proxy $BIN/crontab $SBIN/dnsmasq $ZONE &> /dev/null;echo $? > /var/log/diff.txt
	DIFF=`sed -n '1p' /var/log/diff.txt`
	diff -w /var/log/find.txt /var/log/find_N.txt | grep \^\< > /var/log/diff_show.txt
	if [ "$DIFF" == "0" ]; then
		echo -e -n $DEPENDENCE
		sleep 1 
		echo -e "$ansi_green PASS. $ansi_std"
	else
		if [ ! -e $BIN/chinadns -a ! -e $BIN/crontab -a ! -e $BIN/diff -a ! -e $BIN/Pcap_DNSProxy -a ! -e $BIN/pdnsd-ctl -a ! -e $BIN/ss-redir -a ! -e $BIN/dnscrypt-proxy -a ! -e $SBIN/dnsmasq -a ! -e $ZONE ]; then
			echo -e $DEPENDENCE
			sleep 1
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING \n$BOLD Please install the following software:"$NORM
			rm -rf $PREFIX/opt
			echo -e $ansi_white"shadowsocks-libev \nchinadns \npdnsd \npcap-dnsproxy \ndiffutils \ncrontab \ndnscrypt-proxy \ndnsmasq \nzoneinfo_asia"$ansi_std
			exit 0
		else	
			echo -e $DEPENDENCE
			sleep 1
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING \n$BOLD Please install the following software:"$NORM
			rm -rf $PREFIX/opt
			cat /var/log/diff_show.txt
			exit 0
		fi
	fi
	
	if [ -f "$autorun" ]; then
		echo -e -n $START_SCRIPT
		sleep 1
		echo -e "$ansi_green PASS. $ansi_std"
	fi
	
	ask_yes_or_no() {
    		read -p "$1 ([y]es or [n]o): "
    		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        		y|yes) echo "yes" ;;
        		*)     echo "no" ;;
    		esac
	}

	echo "============================================"
	echo "Please input your shadowsocks account information:"
	read -p "(Your Server IP):" IP
	read -p "(Your Server Port):" port
	read -p "(Your Local Port):" PORT
	read -p "(Your Password):" password
	read -p "(Your Encryption Method):" method
	echo "============================================"
	echo "Please confirm your shadowsocks information:"
	echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
	echo -e "Your Server Port: \033[41;37m ${port} \033[0m"
	echo -e "Your Server Port: \033[41;37m ${PORT} \033[0m"
	echo -e "Your Password: \033[41;37m ${password} \033[0m"
	echo -e "Your Encryption Method: \033[41;37m ${method} \033[0m"
	echo "============================================"

	ping -q -w1 ${IP} | grep PING | sed -e "s;).*;;" -e "s;.*(;;" > /opt/var/log/resolvip_tmp.txt
	if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ] &> /dev/null; then
		echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks set_up"$NORM
		exit 0					
	fi		
	server_ip=/opt/var/log/resolvip_tmp.txt

	get_server_ip() {
		cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
			$(cat ${server_ip=:/dev/null} 2>/dev/null)	
	EOF
	}
	echo $(get_server_ip) > /opt/var/log/resolvip.txt
	sed -i '/^$/d' /opt/var/log/resolvip.txt
	if [ -s "/opt/var/log/resolvip.txt" ]; then
		RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
		echo -e $INFO Creating shadowsocks config file...
		rm -f $CHECK/shadowsocks.json
		cat > $CHECK/shadowsocks.json <<-end
	{
    "server":"$RIP",
    "server_port":${port},
    "local_address":"0.0.0.0",
    "local_port":${PORT},
    "password":"${password}",
    "timeout":60,
    "method":"${method}"
	}
		end
		sed -i '11d' $CHECK/shadowsocks.json
		echo ${PORT} > /opt/var/log/local_port.txt
	else
		echo -e "$WARNING Can not write the configuration information, please re-enter your: $ansi_white \nshadowsocks set_up"$NORM
		exit 0
	fi		
	
	echo -e $INFO Please confirm your shadowsocks and dnsmasq information with "\033[4m yes \033[0m"  or "\033[4m no \033[0m"  to exit
	if [ "no" == $(ask_yes_or_no "Is your config above correct?") ]; then
		echo -e $INFO Re-setting...
  		echo -e $INFO Exiting...
		rm -f $CHECK/shadowsocks.json
  		kill `ps | grep "shadowsocks" | grep -v "grep" | awk '{print $1}'`
	fi		

echo -e $INFO "Please select Please choose the following programs:\n\
$BOLD##programs_1##:$NORM (ss-redir+gfwlist+pdnsd)\n\
$BOLD##programs_2##:$NORM (ss-redir+chnroutes+chinadns+pdnsd)\n\
$BOLD##programs_3##:$NORM (ss-redir+chnroutes+chinadns+dnscrypt-proxy)\n\
$BOLD##programs_4##:$NORM (ss-redir+chnroutes+pcap_dnsproxy)\n\
$BOLD##programs_5##:$NORM (ss-tunnel+chnroutes+chinadns)\n\
Your Choice:"
	read programs
	if [ $programs == "1" ];then
		echo -e "$BOLD Set programs_1..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > $PREFIX/opt/var/log/server.txt

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S26pdnsd (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -i 's/PROCS=ss-start/PROCS=ss-nat/;s/^ARGS=""/ARGS="-G"/' $CHECK/init.d/S99ss-rules		

		echo -e $INFO Configuring dnsmasq_custom...
		echo > $dnsmasq
		echo "min-cache-ttl=600" >> $dnsmasq
		echo "cache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$CHECK/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq

		service dnsmasq restart		

		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks -S
		touch /var/log/ipset.lock
		$PREFIX/shadowsocks/shadowsocks -m
		sleep 1
		$PREFIX/shadowsocks/shadowsocks -r
		$PREFIX/shadowsocks/shadowsocks -ug

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		rm -f $CHECK/pdnsd.conf
		cat > $CHECK/pdnsd.conf <<-end
global {
perm_cache=2048;
cache_dir="/var/pdnsd";
run_as="nobody";
server_port = 1054;
server_ip = 127.0.0.1;  
status_ctl = on;					               
query_method=tcp_only;
min_ttl=6h;       
max_ttl=1w;        
timeout=10;        
}

server {
label= "google";
ip = 208.67.222.222; 
port = 443;   	
root_server = on;    
uptest= none;         
}
		end
		
		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
		
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log\
		\necho \"\" > /var/log/pdnsd_watchdog.log\
		\necho \"\" > /var/log/iptables_rules.log" \
		> $CHECK/cron.5mins/clear_log.sh
		sed -i 's/[\t]*//g' $CHECK/cron.5mins/clear_log.sh
		echo -e "shadowsocks -c" > $CHECK/cron.1min/check.sh				

		shadowsocks temp

		$PREFIX/shadowsocks/shadowsocks -b	
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"	
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "2" ];then
		echo -e "$BOLD Set programs_2..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed '4c PROCS=chinadns' $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S24cn
		sed '5c ARGS="-p 5353 -c /opt/etc/chnroute.txt -s 114.114.114.114,127.0.0.1:1054"' $CHECK/init.d/S24cn > $CHECK/init.d/S24chinadns

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S26pdnsd (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks	
		
		CHINADNS=`nvram get wan_get_dns | sed 's/ /,/'`
		sed -i "s/^ARGS=\(.*\)114.114.114.114\(.*\)$/ARGS=\1$CHINADNS\2/" $CHECK/init.d/S24chinadns
	
		rm -f $CHECK/init.d/S24cn
		chmod +x $CHECK/init.d/S2*

		sleep 1
		echo -e $INFO Creating pdnsd.conf file...
		rm -f $CHECK/pdnsd.conf
		cat > $CHECK/pdnsd.conf <<-end
global {
perm_cache=2048;
cache_dir="/var/pdnsd";
run_as="nobody";
server_port = 1054;
server_ip = 127.0.0.1;  
status_ctl = on;					               
query_method=tcp_only;
min_ttl=6h;       
max_ttl=1w;        
timeout=10;        
}

server {
label= "google";
ip = 208.67.222.222,208.67.220.220;     	
root_server = on;    
uptest= none;         
}
		end

		echo -e $INFO Configuring dnsmasq_custom...	
		sleep 1
		echo > $dnsmasq			
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nmin-cache-ttl=600 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$CHECK/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq			
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		

		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks -S
		sleep 4
		$PREFIX/shadowsocks/shadowsocks -m
		sleep 2
		$PREFIX/shadowsocks/shadowsocks -r

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit

		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log\
		\necho \"\" > /var/log/pdnsd_watchdog.log\
		\necho \"\" > /var/log/chinadns_watchdog.log\
		\necho \"\" > /var/log/iptables_rules.log" \
		> $CHECK/cron.5mins/clear_log.sh
		sed -i 's/[\t]*//g' $CHECK/cron.5mins/clear_log.sh
		echo -e "shadowsocks -c" > $CHECK/cron.1min/check.sh		

		shadowsocks temp		
		
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		$PREFIX/shadowsocks/shadowsocks -b
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "3" ];then
		echo -e "$BOLD Set programs_3..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed '4c PROCS=chinadns' $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S24cn
		sed '5c ARGS="-p 5353 -c /opt/etc/chnroute.txt -s 114.114.114.114,127.0.0.1:1054,208.67.222.222:443"' $CHECK/init.d/S24cn > $CHECK/init.d/S24chinadns

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S29dnscrypt-proxy (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks	

		CHINADNS=`nvram get wan_get_dns | sed 's/ /,/'`
		sed -i "s/^ARGS=\(.*\)114.114.114.114\(.*\)$/ARGS=\1$CHINADNS\2/" $CHECK/init.d/S24chinadns

		rm -f $CHECK/init.d/S24cn
		chmod +x $CHECK/init.d/S2*

		echo -e $INFO Configuring dnsmasq_custom...
		sleep 1
		echo > $dnsmasq		
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nproxy-dnssec \nmin-cache-ttl=6000 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$CHECK/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		

		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks -S
		sleep 4
		$PREFIX/shadowsocks/shadowsocks -m
		sleep 2
		$PREFIX/shadowsocks/shadowsocks -r

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
	
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log\
		\necho \"\" > /var/log/dnscrypt-proxy_watchdog.log\
		\necho \"\" > /var/log/chinadns_watchdog.log\
		\necho \"\" > /var/log/iptables_rules.log" \
		> $CHECK/cron.5mins/clear_log.sh
		sed -i 's/[\t]*//g' $CHECK/cron.5mins/clear_log.sh			
		echo -e "shadowsocks -c" > $CHECK/cron.1min/check.sh	

		shadowsocks temp		
		
		/opt/etc/init.d/S29dnscrypt-proxy start
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		$PREFIX/shadowsocks/shadowsocks -b	
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "4" ];then
		echo -e "$BOLD Set programs_4..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks

		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S27pcap_dnsproxy (start))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks

		echo -e $INFO Configuring dnsmasq_custom...
		sleep 1
		echo > $dnsmasq		
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nall-servers \nmin-cache-ttl=6000 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$CHECK/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		

		local_dns=`cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' | sed -n '1p'`
		sed -i "s/ 114.114.115.115:53/ $local_dns:53/" $CHECK/pcap-dnsproxy/Config.conf
		
		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		touch /var/log/pcap_dnsproxy.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks -S
		sleep 4
		$PREFIX/shadowsocks/shadowsocks -m
		sleep 2
		$PREFIX/shadowsocks/shadowsocks -r

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
	
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log\
		\necho \"\" > /var/log/Pcap_DNSProxy_watchdog.log\
		\necho \"\" > /var/log/iptables_rules.log" \
		> $CHECK/cron.5mins/clear_log.sh
		sed -i 's/[\t]*//g' $CHECK/cron.5mins/clear_log.sh			
		echo -e "shadowsocks -c" > $CHECK/cron.1min/check.sh			

		shadowsocks temp
		
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		$PREFIX/shadowsocks/shadowsocks -b		
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	elif [ $programs == "5" ];then
		echo -e "$BOLD Set programs_5..." $NORM
		sed -e "s/shadowsocks.json\"/shadowsocks.json\"/" -e "s/PROCS=ss-local/PROCS=ss-redir/" -i  $CHECK/init.d/S22shadowsocks
		sed -e "s/shadowsocks.json\"/shadowsocks.json -b 0.0.0.0 -l 5300 -L 8.8.8.8:53 -u\"/" -e "s/PROCS=ss-redir/PROCS=ss-tunnel/" $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S23ss-tunnel
		sed '4c PROCS=chinadns' $CHECK/init.d/S22shadowsocks > $CHECK/init.d/S24cn
		sed '5c ARGS="-p 5353 -l /opt/etc/chinadns_iplist.txt -c /opt/etc/chnroute.txt -s 114.114.114.114,127.0.0.1:5300"' $CHECK/init.d/S24cn > $CHECK/init.d/S24chinadns
		
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S23ss-tunnel (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks
		sed -r 's/#(['$'\t'' ]*\/opt\/etc\/init.d\/S24chinadns (start|restart))/\1/' $PREFIX/shadowsocks/shadowsocks -i $PREFIX/shadowsocks/shadowsocks	

		CHINADNS=`nvram get wan_get_dns | sed 's/ /,/'`
		sed -i "s/^ARGS=\(.*\)114.114.114.114\(.*\)$/ARGS=\1$CHINADNS\2/" $CHECK/init.d/S24chinadns
	
		rm -f $CHECK/init.d/S24cn
		chmod +x $CHECK/init.d/S2*

		echo -e $INFO Configuring dnsmasq_custom...
		sleep 1
		echo > $dnsmasq		
		echo -e "no-resolv \nno-poll \nserver=127.0.0.1#5353 \nmin-cache-ttl=6000 \ncache-size=10000" >> $dnsmasq
		echo -e "conf-dir=$CHECK/dnsmasq.d" >> $dnsmasq
		echo "resolv-file=/etc/resolv.dnsmasq" >> $dnsmasq
		echo "addn-hosts=/etc/dnsmasq/hosts" >> $dnsmasq
		echo "dhcp-hostsfile=/etc/dnsmasq/dhcp" >> $dnsmasq
		echo "expand-hosts" >> $dnsmasq
		echo "min-port=4096" >> $dnsmasq
		echo "stop-dns-rebind" >> $dnsmasq
		echo "rebind-localhost-ok" >> $dnsmasq		
		echo "interface=`nvram get lan_ifname`" >> $dnsmasq
		echo "dhcp-range=tag:`nvram get lan_ifname`,`nvram get dhcpd_startip`,`nvram get dhcpd_endip`,255.255.255.0,1440m" >> $dnsmasq
		echo "dhcp-option=tag:`nvram get lan_ifname`,3,`nvram get lan_ipaddr`" >> $dnsmasq
		echo "dhcp-lease-max=255" >> $dnsmasq
		echo "dhcp-authoritative" >> $dnsmasq
		echo >> $dnsmasq
		sed -i '1d' $dnsmasq		
			
		touch $PREFIX/shadowsocks/update.lock
		touch $PREFIX/shadowsocks/chnroutes.lock
		echo UTC-8 > $CHECK/TZ		
		$PREFIX/shadowsocks/shadowsocks -S
		sleep 4
		$PREFIX/shadowsocks/shadowsocks -m
		sleep 2
		$PREFIX/shadowsocks/shadowsocks -r

		echo -e $INFO Configuring ntp server...
		cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' > $PREFIX/shadowsocks/dns.list
		DNS=`sed -n '1p' $PREFIX/shadowsocks/dns.list`
		NTP=$PREFIX/shadowsocks/dnsmasq.d/ntp_server.conf
		echo "server=/0.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/1.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/2.asia.pool.ntp.org/$DNS" >> $NTP
		echo "server=/3.asia.pool.ntp.org/$DNS" >> $NTP
		echo >> $NTP
		rm -f $PREFIX/shadowsocks/dns.list

		nvram set tm_dst="1"
		nvram set tm_sel="UTC-8"
		nvram set tm_tz="UTC-8"
		nvram set ntp_kiss=""
		nvram set ntp_kiss_ignore=""
		nvram set ntp_server="0.asia.pool.ntp.org 1.asia.pool.ntp.org 2.asia.pool.ntp.org"
		nvram set ntp_tdod="0"
		nvram set ntp_updates="1"		

		echo -e $INFO Configuring turn startup items and guard the capital...
		echo -e "$PREFIX/opt/etc/init.d/auto.run" > /var/log/scr_c.txt
		SCR=`sed -e '' /var/log/scr_c.txt`
		nvram set script_wanup="$SCR"
		nvram commit
	
		echo -e "echo \"\" > /var/log/shadowsocks_watchdog.log\
		\necho \"\" > /var/log/chinadns.log\
		\necho \"\" > /var/log/iptables_rules.log" \
		> $CHECK/cron.5mins/clear_log.sh
		sed -i 's/[\t]*//g' $CHECK/cron.5mins/clear_log.sh	
		echo -e "shadowsocks -c" > $CHECK/cron.1min/check.sh			

		shadowsocks temp
		
		rm -f $PREFIX/shadowsocks/update.lock
		rm -f $PREFIX/shadowsocks/chnroutes.lock
		$PREFIX/shadowsocks/shadowsocks -b		
		echo -e "$BOLD Set successfully, please reboot the router. $NORM"		
		echo -e "$ansi_red Set successfully, please reboot the router. Found a Bug? Plea se report at https://github.com/houzi-/tomato-shadowsocks/issues. $ansi_std"
		killall shadowsocks > /dev/null
	fi	
	;;

-m | --modules)
	echo -e -n "$ansi_white Loading ipset module... "
	if [ ! "`lsmod | grep xt_set | wc -l`" -eq 2 ]; then
		for module in ip_set ip_set_bitmap_ip ip_set_bitmap_ipmac ip_set_bitmap_port ip_set_hash_ip ip_set_hash_ipport ip_set_hash_ipportip ip_set_hash_ipportnet ip_set_hash_net ip_set_hash_netport ip_set_list_set xt_set
		do
			modprobe $module
		done
	fi
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	;;

-S | --START)
	sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > /var/log/server.txt
	
	if [ -f "$PREFIX/shadowsocks/chnroutes.lock" ]; then
		$PREFIX/shadowsocks/shadowsocks -u
	else
		echo '['$DATE'] Has loaded China route table.' > /var/log/chnroutes.log
	fi	
	
	PROCESS=$(ps | grep "ss-redir" | grep -v "grep")
	if [ -z "$PROCESS" ]; then
		mount -o bind /opt/sbin/dnsmasq /usr/sbin/dnsmasq && service dnsmasq restart
		/opt/etc/init.d/S22shadowsocks start && touch /var/log/shadowsocks.lock
#		/opt/etc/init.d/S23ss-tunnel start && touch /var/log/ss-tunnel.lock
#		/opt/etc/init.d/S26pdnsd start && touch /var/log/pdnsd.lock
#		/opt/etc/init.d/S24chinadns start && touch /var/log/chinadns.lock
#		/opt/etc/init.d/S27pcap_dnsproxy start && touch /var/log/pcap_dnsproxy.lock
#		/opt/etc/init.d/S29dnscrypt-proxy start && touch /var/log/dnscrypt-proxy.lock
		/opt/etc/init.d/S00timezone start
		/opt/etc/init.d/S10cron start
		exit 0
	else
		for i in `cat /var/log/server.txt`;do
        		for j in `cat $PREFIX/opt/var/log/server.txt`;do
                		if [ $i == $j ]; then
					echo "$(date): OK" >> /var/log/account_switching.log
				else
					/opt/etc/init.d/S22shadowsocks restart
#					/opt/etc/init.d/S23ss-tunnel restart
					rm -f $PREFIX/shadowsocks/flush.lock
					$PREFIX/shadowsocks/shadowsocks -f
					sleep 2
					$PREFIX/shadowsocks/shadowsocks -r
				fi
			done
		done
	fi
	;;

-r | --rules)
	sed -n 's/.*ver":"\(.*\)".*/\1/p' $CHECK/shadowsocks.json  > $PREFIX/opt/var/log/server.txt
	/opt/etc/init.d/S99ss-rules start
	echo -e -n "$ansi_white Loading iptables rules... "
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	;;

-g | --global)
	case ${2} in
		start)
			echo -e "$ansi_red **WARNING** USE AT YOUR OWN RISK! You want to ${2} global?(y/N) $ansi_std"
			read choice
			if [ "${choice}" == "y" ]; then
				touch $CHECK/global.list
				sed -i 's/\SS_SPEC_WAN_AC/SS_SPEC_WAN_FW/' /opt/bin/ss-start
				echo -e -n "$ansi_white ${2} Global... "
				sleep 1
				echo -e "            $ansi_green done. $ansi_std"
				$PREFIX/shadowsocks/shadowsocks -f
				$PREFIX/shadowsocks/shadowsocks -r
			else
				: ${warning:?"You do not have any operations."}
			fi
		;;

		stop)
			echo -e "$ansi_red **WARNING** USE AT YOUR OWN RISK! You want to ${2} global?(y/N) $ansi_std"
			read choice
			if [ "${choice}" == "y" ]; then
				touch $CHECK/global.list
				sed -i 's/\SS_SPEC_WAN_FW/SS_SPEC_WAN_AC/' /opt/bin/ss-start
				echo -e -n "$ansi_white ${2} Global... "
				sleep 1
				echo -e "            $ansi_green done. $ansi_std"
				$PREFIX/shadowsocks/shadowsocks -f
				$PREFIX/shadowsocks/shadowsocks -r
			else
				: ${warning:?"You do not have any operations."}
			fi
		;;
		esac
	;;
    
-f | --flush)
	echo -e -n "$ansi_white Flushing rules... "
	/opt/bin/ss-nat -f		
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	;;

-u | --update)
	directory=$(cd $PREFIX/shadowsocks && ls | grep "dnsmasq.d" | grep -v "grep")
	if [ -z "$directory" ]; then
		cd $CHECK && mkdir dnsmasq.d
	fi

	if [ -f "$CHECK/ignore.list" ]; then
		rm -f $CHECK/ignore.list
	fi

	IGNORE_LIST=$CHECK/ignore.list

	wget -t0 -O- $china_routing_list | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > $IGNORE_LIST	

	if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
		rm -f $CHECK/pcap-dnsproxy/Routing.txt $CHECK/pcap-dnsproxy/WhiteList.txt

		# Update Local Hosts
		cd /tmp;curl --insecure -O $china_domain_list;cd /
		echo -e '[Local Hosts]' >> /tmp/WhiteList.txt
		echo -e '## China mainland domains' >> /tmp/WhiteList.txt
		echo -e '## Get the latest database: https://github.com/xinhugo/Free-List/blob/master/WhiteList.txt' >> /tmp/WhiteList.txt
		echo -e '## Report an issue: https://github.com/xinhugo/Free-List/issues' >> /tmp/WhiteList.txt
		echo -e "## Last update: $DATE\n" >> /tmp/WhiteList.txt
		sed 's|/114.114.114.114$||' /tmp/accelerated-domains.china.conf > /tmp/WhiteList_tmp.txt
		sed -i 's|\(\.\)|\\\1|g' /tmp/WhiteList_tmp.txt
		sed -i 's|server=/|.*\\\b|' /tmp/WhiteList_tmp.txt
		sed -i 's|b\(cn\)$|\.\1|' /tmp/WhiteList_tmp.txt
		cat /tmp/WhiteList_tmp.txt >> /tmp/WhiteList.txt

		cd /tmp;curl --insecure -O $china_google_list;cd /
		sed 's|/114.114.114.114$||' /tmp/google.china.conf > /tmp/WhiteList_tmp.txt
		sed -i 's|\(\.\)|\\\1|g' /tmp/WhiteList_tmp.txt
		sed -i 's|server=/|.*\\\b|' /tmp/WhiteList_tmp.txt
		cat /tmp/WhiteList_tmp.txt >> /tmp/WhiteList.txt
		echo -e -n "$ansi_white Updating Local Hosts... "
		sleep 1
		echo -e "            $ansi_green done. $ansi_std"

		cp /tmp/WhiteList.txt $CHECK/pcap-dnsproxy
		rm -f /tmp/WhiteList_tmp.txt /tmp/WhiteList.txt /tmp/accelerated-domains.china.conf /tmp/google.china.conf
	
		# Update Local Routing
		curl --insecure $china_routing_list | grep ipv4 | grep CN | awk -F\| '{printf("%s/%d\n", $4, 32-log($5)/log(2))}' > /tmp/Routing_IPv4.txt
		echo -e '[Local Routing]' >> /tmp/Routing_IPv4_tmp.txt
		echo -e '## China mainland routing blocks' >> /tmp/Routing_IPv4_tmp.txt
		echo -e "## Last update: $DATE\n\n" >> /tmp/Routing_IPv4_tmp.txt
		echo -e '## IPv4' >> /tmp/Routing_IPv4_tmp.txt
		echo -e '## Get the latest database from APNIC -> https://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' >> /tmp/Routing_IPv4_tmp.txt
		cat /tmp/Routing_IPv4.txt >> /tmp/Routing_IPv4_tmp.txt

		curl --insecure $china_routing_list | grep ipv6 | grep CN | awk -F\| '{printf("%s/%d\n", $4, $5)}' > /tmp/Routing_IPv6.txt
		echo -e '## IPv6' >> /tmp/Routing_IPv6_tmp.txt
		echo -e '## Get the latest database from APNIC -> https://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' >> /tmp/Routing_IPv6_tmp.txt
		cat /tmp/Routing_IPv6.txt >> /tmp/Routing_IPv6_tmp.txt

		cat /tmp/Routing_IPv6_tmp.txt >> /tmp/Routing_IPv4_tmp.txt
		touch /tmp/Routing.txt
		cat /tmp/Routing_IPv4_tmp.txt >> /tmp/Routing.txt
		echo -e -n "$ansi_white Updating Local Routing... "
		sleep 1
		echo -e "            $ansi_green done. $ansi_std" 
	
		cp /tmp/Routing.txt $CHECK/pcap-dnsproxy
		rm -f /tmp/Routing_IPv4.txt /tmp/Routing_IPv4_tmp.txt /tmp/Routing_IPv6.txt /tmp/Routing_IPv6_tmp.txt /tmp/Routing.txt
	else
		wget -t0 -O- $china_routing_list | awk -F\| '/CN\|ipv4/ { printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > $CHECK/chnroute.txt
		cd $CHECK/dnsmasq.d/;curl --insecure -O $china_domain_list;cd /
		DNS=`cat /etc/resolv.dnsmasq | awk '/^nameserver/{print $2}' | sed -n '1p'`
		sed -i "s|^\(server.*\)/[^/]*$|\1/$DNS|" $CHECK/dnsmasq.d/accelerated-domains.china.conf
	fi
	
	if [ -f "$PREFIX/shadowsocks/update.lock" ]; then
		echo '['$DATE'] Has loaded China route table.' > /var/log/chnroutes.log
	else
		if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
			/opt/etc/init.d/S27pcap-dnsproxy restart
			$PREFIX/shadowsocks/shadowsocks -f
			sleep 1
			$PREFIX/shadowsocks/shadowsocks -r
			service dnsmasq restart	
		else
			/opt/etc/init.d/S24chinadns restart
			$PREFIX/shadowsocks/shadowsocks -f
			sleep 1
			$PREFIX/shadowsocks/shadowsocks -r
			service dnsmasq restart && [ -f "/var/log/dnscrypt-proxy.lock" ] && /opt/etc/init.d/S29dnscrypt-proxy start	
		fi
	fi

	echo -e -n "$ansi_white Updating chnroutes... "
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"	
	;;

-ug | --update_gfwlist)
	echo -e -n "$ansi_white Updating gfwlist... "
	directory=$(cd $PREFIX/shadowsocks && ls | grep "dnsmasq.d" | grep -v "grep")
	if [ -z "$directory" ]; then
		cd $CHECK && mkdir dnsmasq.d
	fi
		
	DNS=127.0.0.1#1054
		
	wget -t0 -O $CHECK/dnsmasq.d/gfwlist.conf $gfw_block_list
		
	sed -i "s|^\(server.*\)/[^/]*$|\1/$DNS|" $CHECK/dnsmasq.d/gfwlist.conf
	sed -i "s|^\(ipset.*\)/[^/]*$|\1/gfw_black_list|" $CHECK/dnsmasq.d/gfwlist.conf
	sleep 1
	echo -e "            $ansi_green done. $ansi_std"
	service dnsmasq restart
	;;
	
-c | --check)
	SHADOWSOCKS=$(ps | grep "ss-redir" | grep -v "grep")
	if [ -f "/var/log/shadowsocks.lock" ]; then
		if [ -z "$SHADOWSOCKS" ]; then
        		echo '['$DATE'] Shadowsoks abnormal operation, restarting shadowsocks.' >> /var/log/shadowsocks_watchdog.log 2>&1
			/opt/etc/init.d/S22shadowsocks start
		else
      			echo '['$DATE'] No problem, the normal operation of shadowsoks.' >> /var/log/shadowsocks_watchdog.log 2>&1
		fi
	fi		

	if [ -f "$CHECK/ignore.list" ]; then
		if [ "`iptables -t nat -nvL | grep "SS_SPEC_WAN_AC" | wc -l`" -eq 4 ]; then
			logger [check_rules] NO Problem
		else
			logger [check_rules] Loading Rules
			$PREFIX/shadowsocks/shadowsocks -f
			$PREFIX/shadowsocks/shadowsocks -r			
		fi
	else
		if [ "`iptables -t nat -nvL | grep "gfw_black_list" | wc -l`" -eq 2 ]; then
			logger [check_rules] NO Problem
		else
			logger [check_rules] Loading Rules
			$PREFIX/shadowsocks/shadowsocks -f
			$PREFIX/shadowsocks/shadowsocks -r
		fi
	fi

	dnscrypt=$(ps | grep "dnscrypt-proxy" | grep -v "grep")
	if [ -f "/var/log/dnscrypt-proxy.lock" ]; then
		if [ -z "$dnscrypt" ]; then
			echo '['$DATE'] dnscrypt-proxy abnormal operation, restarting dnscrypt-proxy.' >> /var/log/dnscrypt-proxy_watchdog.log 2>&1
#			/opt/etc/init.d/S29dnscrypt-proxy start
		else
			echo '['$DATE'] No problem, the normal operation of dnscrypt-proxy.' >> /var/log/dnscrypt-proxy_watchdog.log 2>&1
		fi
	fi	
	
	Pcap_DNSProxy=$(ps | grep "Pcap_DNSProxy" | grep -v "grep")
	if [ -f "/var/log/pcap_dnsproxy.lock" ]; then
		if [ -z "$Pcap_DNSProxy" ]; then
			echo '['$DATE'] Pcap_DNSProxy abnormal operation, restarting Pcap_DNSProxy.' >> /var/log/Pcap_DNSProxy_watchdog.log 2>&1
#			/opt/etc/init.d/S27pcap_dnsproxy start
		else
			echo '['$DATE'] No problem, the normal operation of Pcap_DNSProxy.' >> /var/log/Pcap_DNSProxy_watchdog.log 2>&1
		fi
	fi

	PDNSD=$(ps | grep "pdnsd" | grep -v "grep")
	if [ -f "/var/log/pdnsd.lock" ]; then	
		if [ -z "$PDNSD" ]; then
			echo '['$DATE'] Pdnsd abnormal operation, restarting pdnsd.' >> /var/log/pdnsd_watchdog.log 2>&1
#			/opt/etc/init.d/S26pdnsd start
		else
			echo '['$DATE'] No problem, the normal operation of pdnsd.' >> /var/log/pdnsd_watchdog.log 2>&1
		fi
	fi
	
	judge=$(cd $CHECK && ls | grep "ignore.list" | grep -v "grep")
	if [ -z "$judge" ]; then
		exit 0
	else
		CHINADNS=$(ps | grep "chinadns" | grep -v "grep")
		if [ -f "/var/log/chinadns.lock" ]; then
			if [ -z "$CHINADNS" ]; then
				echo '['$DATE'] ChinaDNS is restarting.' >> /var/log/chinadns_watchdog.log 2>&1
#				/opt/etc/init.d/S24chinadns start
			else
				echo '['$DATE'] ChinaDNS no problem.' >> /var/log/chinadns_watchdog.log 2>&1
			fi
		fi
	fi		
	;;
	
-sw | --ss_switch)
	yes_or_no() {
		read -p "$1 ([y]es or [n]o): "
		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
			y|yes) echo "yes" ;;
			*)     echo "no" ;;
		esac
	}
	
	echo -e "$ansi_white Do you want to edit json file?(y/N)$ansi_std"
	if [ "yes" == $(yes_or_no) ]; then
		echo -e $INFO Creating JSON file...
		rm -f $CHECK/shadowsocks.json

		echo "============================================"
		echo "Please input your shadowsocks account imformation:"
		read -p "(Your Server IP):" IP
		read -p "(Your Server Port):" port
		read -p "(Your Local Port):" PORT
		read -p "(Your Password):" password
		read -p "(Your Encryption Method):" method
		echo "============================================"
		echo "Please confirm your shadowsocks imformation:"
		echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
		echo -e "Your Server Port: \033[41;37m ${port} \033[0m"
		echo -e "Your Server Port: \033[41;37m ${PORT} \033[0m"
		echo -e "Your Password: \033[41;37m ${password} \033[0m"
		echo -e "Your Encryption Method: \033[41;37m ${method} \033[0m"
		echo "============================================"

		ping -q -w1 ${IP} | grep PING | sed -e "s;).*;;" -e "s;.*(;;" > /opt/var/log/resolvip_tmp.txt
		if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ] &> /dev/null; then
			echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks ss_switch"$NORM				
			exit 0					
		fi		
		server_ip=/opt/var/log/resolvip_tmp.txt
		
		get_server_ip() {
			cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
				$(cat ${server_ip=:/dev/null} 2>/dev/null)	
		EOF
		}
		echo $(get_server_ip) > /opt/var/log/resolvip.txt
		sed -i '/^$/d' /opt/var/log/resolvip.txt		
		if [ -s "/opt/var/log/resolvip.txt" ]; then
			echo -e -n $ss_switch
			RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
			cat > $CHECK/shadowsocks.json <<-end
{
    "server":"$RIP",
    "server_port":${port},
    "local_address":"0.0.0.0",
    "local_port":${PORT},
    "password":"${password}",
    "timeout":60,
    "method":"${method}"
}
			end
			sed -i '11d' $CHECK/shadowsocks.json		
			sleep 1 
			echo -e "$ansi_green PASS. $ansi_std"			
		else
			echo -e -n $ss_switch
			sleep 1 
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING Can not write the configuration information, please re-enter your: $ansi_white \nshadowsocks ss_switch"$NORM
			exit 0			
		fi	
	else
		echo -e $INFO Creating server file...
		echo "============================================"
		echo "Please input your shadowsocks account imformation:"
		read -p "(Your Server IP):" IP
		echo "============================================"
		echo "Please confirm your shadowsocks imformation:"
		echo -e "Your Server IP: \033[41;37m ${IP} \033[0m"
		echo "============================================"

		ping -q -w1 ${IP} | grep PING | sed -e "s;).*;;" -e "s;.*(;;" > /opt/var/log/resolvip_tmp.txt
		if [ `cat /opt/var/log/resolvip_tmp.txt | cut -d"." -f1` == `resolvip -t 10 192. | cut -d"." -f1` ] &> /dev/null; then
			echo -e "$WARNING You input an incorrect IP, please re-enter your: $ansi_white \nshadowsocks mult_switch"$NORM				
			exit 0					
		fi		
		server_ip=/opt/var/log/resolvip_tmp.txt
		
		get_server_ip() {
			cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
				$(cat ${server_ip=:/dev/null} 2>/dev/null)	
		EOF
		}
		echo $(get_server_ip) > /opt/var/log/resolvip.txt
		sed -i '/^$/d' /opt/var/log/resolvip.txt
		if [ -s "/opt/var/log/resolvip.txt" ]; then
			echo -e -n $ss_switch
			RIP=`sed -n '1p' /opt/var/log/resolvip.txt`
			sed -i 's/\("server":"\).*/\1'"$RIP"'",/g' $CHECK/shadowsocks.json
			sleep 1 
			echo -e "$ansi_green PASS. $ansi_std"		
		else
			echo -e -n $ss_switch
			sleep 1 
			echo -e "$ansi_red ERROR. $ansi_std"
			echo -e "$WARNING Can not write IP, please re-enter your: $ansi_white \nshadowsocks ss_switch"$NORM
			exit 0
		fi
	fi

	$PREFIX/shadowsocks/shadowsocks -S
	service dnsmasq restart && [ -f "/var/log/dnscrypt-proxy.lock" ] && /opt/etc/init.d/S29dnscrypt-proxy start
	;;

-sa | --services_action)
	case ${2} in
		stop)
			echo -e "$ansi_red **WARNING** USE AT YOUR OWN RISK! You want to ${2} all service under /opt/etc/init.d?(y/N) $ansi_std"
			read choice	
			if [ "${choice}" == "y" ]; then
				/opt/etc/init.d/rc.unslung ${2}
				if [ "${2}" == "stop" ]; then
					[ ! -f "$CHECK/dnsmasq.conf.bak" ] && \
						cp $CHECK/dnsmasq.conf $CHECK/dnsmasq.conf.bak
					cp /tmp/etc/dnsmasq.conf $CHECK/dnsmasq.conf
					$PREFIX/shadowsocks/shadowsocks -f
					service dnsmasq restart
				fi			
			else
				: ${warning:?"You do not have any operations."}
			fi
		;;

		start)
			echo -e "$ansi_red **WARNING** USE AT YOUR OWN RISK! You want to ${2} all service under /opt/etc/init.d?(y/N) $ansi_std"
			read choice	
			if [ "${choice}" == "y" ]; then
				if [ "${2}" == "start" ]; then
					cp $CHECK/dnsmasq.conf.bak $CHECK/dnsmasq.conf
					$PREFIX/shadowsocks/shadowsocks -f && \
					$PREFIX/shadowsocks/shadowsocks -S && \
					$PREFIX/shadowsocks/shadowsocks -r
					service dnsmasq restart
				fi
			else
				: ${warning:?"You do not have any operations."}
			fi
		;;
 
	*)
		echo -e "$ansi_white usage: [stop|start] $ansi_std"
	esac
	;;
	
-t | --temp)
	if [ ! -f "/var/log/xiaomi_fan.lock" ]; then	
		if [ "$xiaomi_fan" == "1" ]; then
			echo -e -n "$ansi_white Setting XIAOMI Fan Mode... "
			touch /var/log/xiaomi_fan.lock
			nvram set fanctrl_dutycycle=2
			nvram commit
			shadowsocks -t
			sleep 1
			echo -e "            $ansi_green done. $ansi_std"
		else
			:
		fi
	fi

	if [ ! $(cat $CHECK/cron.1min/check.sh | grep "t" | grep -v "grep" | wc -l) -ge 1 ]; then
		sed -i '/^$/d' $CHECK/cron.1min/check.sh
		echo "shadowsocks -t" >> $CHECK/cron.1min/check.sh
		mkdir -p $CHECK/sch_script
		sed -i '/$/G' $CHECK/crontab
		sed -i '/^$/d' $CHECK/crontab
		sed -i '$i\0 8 * * * root /opt/bin/run-parts /opt/etc/sch_script\' $CHECK/crontab
		sed -i '/^$/d' $CHECK/crontab		
		echo "sed -i 's/#\(shadowsocks -t\)/\1/' $CHECK/cron.1min/check.sh" > $CHECK/sch_script/temp_s.sh
		echo "shadowsocks -ts" > $CHECK/cron.daily/temp_s.sh
	fi
	
	T=`cat /proc/dmu/temperature | cut -f 3 -d" " | cut -c 1,2 | grep "^[0-9]\{2\}"`

	if [ $T -lt 80 ]; then
		NEWSPEED=2
	elif [ $T -ge 80 -a $T -lt 90 ];then
		NEWSPEED=3
	elif [ $T -ge 90 -a $T -lt 100 ];then
		NEWSPEED=4
	else
		NEWSPEED=2
	fi

	OLDSPEED=`nvram get fanctrl_dutycycle`
	if [ $OLDSPEED -ne $NEWSPEED ]; then
		nvram set fanctrl_dutycycle=$NEWSPEED
		nvram commit
	fi 
	;;

-ts | --temp_s)
	TC=$(cat $CHECK/cron.1min/check.sh | grep "temp" | grep -v "grep")
	if [ -n "$TC" ]; then
		sed -i 's/\(^shadowsocks -t\)/#\1/' $CHECK/cron.1min/check.sh
	fi

	nvram set fanctrl_dutycycle=1
	nvram commit
	;;

-b | --backup)
	echo -e "$ansi_white You want to backup entware?(y/N)$ansi_std"
	read choice	
	if [ "${choice}" == "y" ]; then
		tar -czf /tmp/entware_backup.tar.gz -C $PREFIX opt
		[ ! -d "$PREFIX/shadowsocks/entware_backup" ] && mkdir -p $PREFIX/shadowsocks/entware_backup
		cp /tmp/entware_backup.tar.gz $PREFIX/shadowsocks/entware_backup/
	fi
	
	echo -e -n $backup
	sleep 1 
	echo -e "$ansi_green PASS. $ansi_std"	
	;;											 

-e | --email)
	curl -s --connect-timeout 1 www.google.com &> /dev/null

	if [ "$?" == "0" ]; then
		echo -e "From: $FROM\nContent-Type: text/plain;\nSubject: $TITLE\n\n$CONTENT\nAt: `date -R`" > /tmp/mail.txt
		cat /tmp/mail.txt | sendmail -v -Ssmtp.163.com -f$FROM -au$username -ap$password $TO &> /dev/null
	fi
	;;

-h | --help)
	shadowsocks
	;;
				
*)
	echo -e "$ansi_green # ------------------------------------------------------------------- $ansi_std"
	echo -e "$ansi_green # Copyright (C) 2016 Jason Lin <wojiaolinmu008@gmail.com> $ansi_std"
	echo -e "$ansi_green # Last edited: 2016.9.7 $ansi_std"
	echo -e "$ansi_green # Version: V6.3-stable (ARM version) $ansi_std"
	echo -e "$ansi_green # Explain: This script can be used only for shibby Tomato ARM firmware. $ansi_std"
	echo -e "$ansi_green # Description: This is a science on ShadowSocks Internet automatic $ansi_std"
	echo -e "$ansi_green # configuration script in Tomato under$ansi_std. "
	echo -e "$ansi_green # This is free software, licensed under the GNU General Public License v3. $ansi_std"
	echo -e "$ansi_green # See /LICENSE for more information. $ansi_std"
	echo -e "$ansi_green # ------------------------------------------------------------------- $ansi_std"
	echo -e "$ansi_white ===================================================================== $ansi_std"
	echo -e "$ansi_blue WIKI: $ansi_std"
	echo -e "$ansi_white   [-su/--set_up] Set ShadowSocks and ChinaDNS $ansi_std"
	echo -e "$ansi_white   [-m/--modules] Loading module $ansi_std"
	echo -e "$ansi_white   [-S/--START] Running ShadowSocks and ChinaDNS $ansi_std"
	echo -e "$ansi_white   [-r/--rules] Application Firewall Policy $ansi_std"	
	echo -e "$ansi_white   [-g/--global] Global Proxy $ansi_std"
	echo -e "$ansi_white   [-f/--flush] Clear firewall policy $ansi_std"
	echo -e "$ansi_white   [-u/--update] Update chnroutes Routing Host $ansi_std"
	echo -e "$ansi_white   [-ug/--update_gfwlist] Update GFWLIST domain $ansi_std"
	echo -e "$ansi_white   [-c/--check] Guardian ss-redir* $ansi_std"
	echo -e "$ansi_white   [-sw/--ss_switch] Account switching $ansi_std"
	echo -e "$ansi_white   [-sa/--services_action] Change all state services $ansi_std"
	echo -e "$ansi_white   [-b/--backup] Backup entware $ansi_std"	
	echo -e "$ansi_white   [-e/--email] Send shadowsocks running information $ansi_std"
	echo -e "$ansi_white   [-h/--help] Script help $ansi_std"
	echo -e "$ansi_white ===================================================================== $ansi_std"
	exit 
	;;
esac